workflow:
  # Name the pipeline
  name: "Pipeline for branch: $CI_COMMIT_BRANCH , tag: $CI_COMMIT_TAG"

  # Run the pipeline jobs under merge requests, or with a certain git tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG == "ci_tests"

# Need to use Conda to build Shakemap, pull the Docker image
default:
  image: ${DEVOPS_REGISTRY}usgs/conda:latest
  tags:
    - development

# For now, just set up a testing stagge to run PyTest
stages:
  - test
  - build
  - docs

# Create parallel pipeline and job version configuration
.versions:
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.9", "3.10"]

# Create reusable build configuration for referencing
.build_config:
  script:
    - source /etc/profile.d/conda.sh
    - conda init bash
    - conda install git
    - conda install python=${PYTHON_VERSION}
    - bash install.sh
    - export PATH="/home/usgs-user/.local/bin:$PATH"
    - echo ${PATH}
    - pwd
    - source activate shakemap
    - strec_cfg update --datafolder /root/.strec/data --slab --gcmt
    - pytest tests/shakelib/multigmpe_test.py

# Create test job
run tests and coverage:
  stage: test
  script:
    # Run build configuration script
    - !reference [.build_config, script]

    # Continue job script
    - pytest -x --cov=shakemap --cov-report xml:coverage.xml --cov-report term --junitxml junit.xml
    - coverage xml

  # Define test coverage and reporting
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml

  rules:
    - *fork
    - *upstream

  # Run the jobs as parallel pipelines
  parallel: !reference [.versions, parallel]

pages:
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public
  rules:
    # This ensures that only merges to the default branch will trigger
    # a pages deploy
    - <<: *upstream
      when: on_success

  script:
    # Run build configuration script
    - !reference [.build_config, script]
    - cd doc_source
    - pip install -r requirements.txt
    - cd ..
    - sphinx-build doc_source/ public
  stage: docs