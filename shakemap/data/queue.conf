###########################################################################
# servers: Accept connections from these servers; a comma-separated list
#          of servers; note that "localhost" is always allowed;
#
# Example:
#
#         servers = myhost.mydomain.xyz, myhost2.mydomain.xyz
#
###########################################################################

###########################################################################
# port: The port upon which sm_queue listens; the default is 9755
#
# Example:
#
#   port = 9804
#
###########################################################################

###########################################################################
# shake_path: The full path to the 'shake' executable. If you are running
#             within a virtual environment then after installation you can
#             do 'which shake' and it will give you the proper path. If the
#             path starts with a "~" you'll want to expand that to a complete
#             path (e.g., if which shake gives you 
#             '~/miniconda/envs/shakemap/bin/shake' and your installation
#             is in '/home/shake', then you'd want to set shake_path to
#             '/home/shake/miniconda/envs/shakemap/bin/shake'). The default
#             is simply 'shake', in which case sm_queue will need to be
#             run in an environment that knows what "shake" is..
###########################################################################

###########################################################################
# shake_command: The command to execute when an event is to be processed.
#                By default this is "shake --force --log <EVID>" in
#                which the string "shake" will be replaced with whatever
#                is set for "shake_path" above (which may literally be
#                "shake"), and "<EVID>" is replaced with the event id. It
#                would be unusual to need to set this parameter unless
#                one wishes to run a command other than shake. In any
#                event, "shake" will be replaced with the contents of
#                "shake_path" and "<EVID>" will be replaced with the
#                event id.
###########################################################################

###########################################################################
# cancel_command: The command to execute when an event is to be canceled.
#                 By default this is "shake --force --log --cancel <EVID>" in
#                 which the string "shake" will be replaced with whatever
#                 is set for "shake_path" above (which may literally be
#                 "shake"), and "<EVID>" is replaced with the event id. It
#                 would be unusual to need to set this parameter unless
#                 one wishes to run a command other than shake. In any
#                 event, "shake" will be replaced with the contents of
#                  "shake_path" and "<EVID>" will be replaced with the
#                 event id.
###########################################################################

########################################################################### 
# max_process_time : the length of time (in seconds) that queue will 
#                    wait for a 'shake' child process to complete; if 
#                    the processing time exceeds this amount, the 
#                    child will be killed. This parameter is helpful to
#                    handle situations where shake hangs (e.g., while 
#                    trying to send email) and queue stops processing
#                    new events as a result. The default is 600. The 
#                    value must be >= 0, but should be set generously
#                    enough so that any automatic run has time to 
#                    complete.
#
# Example:
#
#         max_process_time = 300
#
########################################################################### 

########################################################################### 
# max_subprocesses : The maximum number of (shake) subprocesses allowed
#                    to run at the same time. Triggers in excess of this
#                    mumber will be queued until an existing subprocess
#                    finishes. Queued events will be run in order of 
#                    largest magnitude first. Cancellations are not
#                    queued, they are run immediately. The default is 4.
#
# Example:
#
#       max_subprocesses = 2
#
########################################################################### 

########################################################################### 
# old_event_age : do not process events whose origin times are greater than
#                 this long before the present.
# future_event_age : do not process events whose origin times are greater
#                    than this long into the future (should be relatively
#                    short).
# The default is to process all events regardless of age.
#
# The age format is a positive integer followed by a suffix of "y" (years),
# "d" (days), or "m" (minutes).
#
# Example:
#
#       old_event_age = 1y
#       future_event_age = 5m
#
########################################################################### 

###########################################################################
# minmag: The minimum magnitude an event must achieve to be processed;
#         the default is 4.0; this value can be overridden if the event
#         falls within one of the "box" regions (specified below)
#
# Example:
#
# minmag = 4.0
#
###########################################################################

###########################################################################
# associate_interval: Time between runs of 
#                     shakemap.utils.amps.AmplitudeHandler.associateAll().
#                     This param is only useful if you are using PDL with
#                     receive_amps to collect unassociated amps. If not,
#                     then don't set the parameter, or set it to -1, 
#                     indicating that associateAll with never run. As with
#                     other time parameters this is an integer (minutes)
#                     appended with "m", "h", "d", or "y" (minutes, hours,
#                     days, or years).
#
# Example:
#
#   associate_interval = 2h
#
###########################################################################

###########################################################################
# max_trigger_wait: If a trigger is received and:
#    a) the event is currently being run, it is scheduled to be rerun
#       no later than "max_trigger_wait" in the future; or
#    b) the event is due for a repeat no later than "max_trigger_wait"
#       in the future, then the trigger is "shelved" until the scheduled
#       repeat; or
#    c) the event was run no earlier than "max_trigger_wait" in the past,
#       it is scheduled to be run "max_trigger_wait" in the future
#
# The purpose of this parameter is to prevent the event from being rerun
# too often when many triggers are anticipated, but to make sure that the
# event is rerun in a timely fashion in response to changes in the origin,
# available data, etc. It should be a fairly short period; 5m is the default.
#
# The format is is a positive integer (minutes) appended with "m", "h", "d", 
# or "y" (minutes, hours, days, or years). 0 (zero) is an acceptable value
# and will result in the trigger being honored as soon as possible.
#
# Example:
#
#   max_trigger_wait = 10m
#
###########################################################################

###########################################################################
# boxes: "Metro boxes" (polygons, really) within which the magnitude "mag"
#        supersedes "minmag" (above); multiple boxes are allowed; if the 
#        boxes overlap, the first one encountered will be used; boxes are
#        optional, the default is to have no metro boxes.
#
#        NOTE: The order the boxes are searched is lexicographic. Therefore
#        you may wish to start them with a number (as in the example below),
#        or otherwise name them in a way that will guarantee they are 
#        searched in the order you intend.
#
#        Statement format:
#
#          box_name = '''mag, lat1, lon1, ... latN, lonN'''
#
#        The last coordinate is assumed to connect to the first. The
#        entire list must be enclosed in triple quotes. The list
#        may be broken onto several lines.
#
# Example:
#
# [boxes]
#     01_my_box = '''3.5,
#              33.50, -116.75,
#              33.50, -118.25,
#              34.33, -120.25,
#              34.75, -120.25,
#              34.75, -116.75'''
#     02_my_box2 = '''3.8,
#               34.50, -117.75,
#               34.50, -119.25,
#               34.33, -121.25,
#               34.75, -121.25,
#               34.75, -117.75'''
#
# In this example, 01_my_box will be searched before 02_my_box2 because
# the order of searching is lexicographic.
###########################################################################
[boxes]

###########################################################################
# repeats: Set up a schedule of re-runs for events of varying sizes; each
#          line has the form:
#
#           min_mag = t1, t2, ... tN
#
#          where the tn's are delays (from the event origin time) at 
#          which events of magnitude greater than or equal to "min_mag" will
#          be re-run; the repeat line with the highest magnitude takes 
#          precedence; the default (i.e. no repeat lines are given) is 
#          to not rerun events; the tn's may take one of the following forms:
#
#            <int>
#            <int>m
#            <int>h
#            <int>d
#            <int>y
#
#       Where '<int>' is a positive integer, no suffix or a suffix
#       of 'm' indicates minutes, a suffix 'h' means hours, a suffix
#       'd' means days, and a suffix of 'y' means years.
#
# Example
# To set up the following schedule:
#
#           0.0 <= Mag  < 4.5       : 15, 30 min
#           4.5 <= Mag  < 6.0       : 5, 15, 30 min
#           6.0 <= Mag  < oo        : 5, 15, 30, 60 min
#
# use:
#
#       [repeats]
#           0.0 = 15, 30
#           4.5 = 5, 15, 30
#           6.0 = 5, 15, 30, 1h
###########################################################################
[repeats]

###########################################################################
# network_delays: Delay running events from specified networks for a 
#                 specified time after the origin time. This is useful,
#                 for example, to allow time for ground motion data to
#                 arrive before running the event. Each network is
#                 specified separately using the following form:
#
#                 netid = delay
#
#                 where netid is the network's ID, and delay is a time
#                 specified as described above in the 'repeats' section.
#                 The network ID must match exactly the ID in the 
#                 event/origin structure sent to the queue.
# 
# Example
# The line:
#
#           ci = 5m
#
# will delay running events from the 'ci' network for 5 minutes after the
# origin time.
###########################################################################
[network_delays]
