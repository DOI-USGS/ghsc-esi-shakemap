# ###########################################################################
# This configuration file provides a location for parameters
# that affect the way the shake logging works.
# ###########################################################################
# version is required as described here:
# https://docs.python.org/2/library/logging.config.html#logging-config-dictschema
version = 1
# allow other loggers to exist alongside the one for ShakeMap
disable_existing_loggers = False

[ formatters ]
   [[ standard ]]
        format = %(levelname)s -- %(asctime)s -- %(module)s.%(funcName)s -- %(message)s
        datefmt = %Y-%m-%d %H:%M:%S

[ handlers ]
    # a filename will be filled in dynamically, but generally this file will be
    # found in ~/ShakeMap/[PROFILE]/install/logs/shake.log
    # Archived versions of the log file will be found in the same directory.
    # The default logging level set here is INFO, which users can change if
    # desired to a finer level (DEBUG) or coarser (WARNING,ERROR,CRITICAL).
    # The file logging handler defined here is a TimedRotatingFileHandler,
    # which automatically rolls over at a specified time, which we set
    # to midnight.  For instructions on how to set this to a different time,
    # see the documentation here:
    # https://docs.python.org/2/library/logging.handlers.html#timedrotatingfilehandler
    [[ global_file ]]
        level = INFO
        formatter = standard
        class = logging.handlers.TimedRotatingFileHandler
        when = midnight
        
    # a filename will be filled in dynamically, but generally this file will be
    # found in ~/ShakeMap/[PROFILE]/data/[EVENT]/shake.log
    # The default logging level set here is INFO, which users can change if
    # desired to a finer level (DEBUG) or coarser (WARNING,ERROR,CRITICAL).
    [[ event_file ]]
        class = logging.FileHandler
        level = INFO
        formatter = standard

    # This section below can only be configured by end users, as it
    # is intended to allow those users to set up automated error
    # alerts whenever ShakeMap code raises a fatal error.
    # In order for this to work, you would need to supply a mail
    # host (SMTP server), a "from" email address, and a comma separated list
    # of "to" email addresses that should be alerted whenever
    # an error occurs.
    # The level must be set to CRITICAL as configured below.
    # 
    # [[ smtp ]]
    #     class = logging.handlers.SMTPHandler
    #     mailhost = [SMTP_SERVER]
    #     level = CRITICAL
    #     formatter = standard
    #     fromaddr = [SENDER_ADDRESS]
    #     toaddrs = [DEVELOPER_LIST]
    #     subject = 'ShakeMap Error'
        
[ loggers ] 
    [[ shake_log ]]
        # if you want emails when exceptions occur,
        # fill in exception_smtp above and add to list
        # of handlers below
        handlers = global_file,event_file
        level = INFO
        propagate = False


